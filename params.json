{"name":"Program","tagline":"","body":"   \r\nï»¿//rito hire me pls\r\n\r\n#region\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing LeagueSharp;\r\nusing LeagueSharp.Common;\r\n\r\n#endregion\r\n\r\nnamespace RefundExploiter\r\n{\r\n    internal class Program\r\n    {\r\n        public static Menu Menu;\r\n\r\n        public static List<int> Consumables = new List<int> { 2003, 2004, 2009, 2010, 2037, 2039, 2043, 2044, 2047 };\r\n        public static List<int> NoCD = new List<int> { 3074, 3140, 3153, };\r\n\r\n        public static int RefundItemId = 0;\r\n        private static byte RefundInventorySlot;\r\n\r\n        public static bool Swapped = false;\r\n        public static bool Refunded = false;\r\n        public static bool BotrkInSlot = false;\r\n\r\n        private static void Main(string[] args)\r\n        {\r\n            CustomEvents.Game.OnGameLoad += Game_OnGameLoad;\r\n        }\r\n\r\n        private static void Game_OnGameLoad(EventArgs args)\r\n        {\r\n            Menu = new Menu(\"RefundExploiter\", \"RefundExploiter\", true);\r\n            Menu.AddItem(new MenuItem(\"Enabled\", \"Enabled\").SetValue(false));\r\n            Menu.AddItem(new MenuItem(\"Consumables\", \"Exploit Consumables\").SetValue(true));\r\n            Menu.AddItem(new MenuItem(\"NoCD\", \"Exploit No-CD Items\").SetValue(true));\r\n            Menu.AddItem(new MenuItem(\"Cast\", \"Cast\").SetValue(new KeyBind(32, KeyBindType.Press)));\r\n            Menu.AddToMainMenu();\r\n\r\n            Game.OnGameProcessPacket += Game_OnGameProcessPacket;\r\n            Game.OnGameUpdate += Game_OnGameUpdate;\r\n            Game.PrintChat(\"Refund Exploit by Trees and blm95 loaded!\");\r\n            //rito hire me pls\r\n        }\r\n\r\n        private static void Game_OnGameUpdate(EventArgs args)\r\n        {\r\n            if (!BotrkInSlot || !Menu.Item(\"Cast\").GetValue<KeyBind>().Active)\r\n            {\r\n                return;\r\n            }\r\n\r\n            ObjectManager.Player.IssueOrder(GameObjectOrder.MoveTo, Game.CursorPos);\r\n\r\n            foreach (var p in\r\n                ObjectManager.Get<Obj_AI_Hero>()\r\n                    .Where(h => h.IsValidTarget(500))\r\n                    .Select(enemy => new Packet.C2S.Cast.Struct(enemy.NetworkId, SpellSlot.Trinket)))\r\n            {\r\n                Packet.C2S.Cast.Encoded(p).Send();\r\n            }\r\n        }\r\n\r\n        private static void Game_OnGameProcessPacket(GamePacketEventArgs args)\r\n        {\r\n            if (!Menu.Item(\"Enabled\").GetValue<bool>())\r\n            {\r\n                return;\r\n            }\r\n\r\n            if (args.PacketData[0] == Packet.S2C.BuyItemAns.Header)\r\n            {\r\n                var dp = Packet.S2C.BuyItemAns.Decoded(args.PacketData);\r\n                if (dp.NetworkId != ObjectManager.Player.NetworkId || dp.SpellSlot == SpellSlot.Trinket)\r\n                {\r\n                    return;\r\n                }\r\n\r\n                if ((Consumables.Contains(dp.Item.Id) && Menu.Item(\"Consumables\").GetValue<bool>()))\r\n                {\r\n                    Refunded = true;\r\n                    Packet.C2S.Undo.Encoded().Send();\r\n                }\r\n                else if (NoCD.Contains(dp.Item.Id) && Menu.Item(\"NoCD\").GetValue<bool>())\r\n                {\r\n                    Refunded = true;\r\n                    RefundItemId = dp.Item.Id;\r\n                    RefundInventorySlot = dp.InventorySlot;\r\n                    Packet.C2S.Undo.Encoded().Send();\r\n                }\r\n            }\r\n            else if (args.PacketData[0] == Packet.MultiPacket.Header &&\r\n                     args.PacketData[5] == Packet.MultiPacket.UndoConfirm.SubHeader && Refunded)\r\n            {\r\n                Refunded = false;\r\n\r\n                if (RefundItemId == 0) // consumable item\r\n                {\r\n                    args.Process = false;\r\n                    return;\r\n                }\r\n\r\n                if (ObjectManager.Player.Spellbook.GetSpell(SpellSlot.Trinket).Name == \"nospelldata\")\r\n                {\r\n                    SwapToTrinket();\r\n                    return;\r\n                }\r\n\r\n                SellTrinket();\r\n            }\r\n            else if (args.PacketData[0] == Packet.S2C.SwapItemAns.Header && RefundItemId != 0 && Swapped)\r\n            {\r\n                var dp = Packet.S2C.SwapItemAns.Decoded(args.PacketData);\r\n                if (dp.ToInventorySlot == 6)\r\n                {\r\n                    RecvItemToTrinket(RefundItemId);\r\n                    RefundItemId = 0;\r\n                    RefundInventorySlot = 0;\r\n                    Swapped = false;\r\n                }\r\n            }\r\n            else if (args.PacketData[0] == Packet.S2C.SellItemAns.Header)\r\n            {\r\n                var dp = Packet.S2C.SellItemAns.Decoded(args.PacketData);\r\n                if (dp.SpellSlot == SpellSlot.Trinket)\r\n                {\r\n                    SwapToTrinket();\r\n                }\r\n            }\r\n        }\r\n\r\n        private static void SellTrinket(int networkId = -1)\r\n        {\r\n            var p = new GamePacket(0x9);\r\n            p.WriteInteger(networkId == -1 ? ObjectManager.Player.NetworkId : networkId);\r\n            p.WriteByte(6);\r\n            p.WriteByte(0);\r\n            p.Send();\r\n        }\r\n\r\n        private static void SwapToTrinket()\r\n        {\r\n            Swapped = true;\r\n            BotrkInSlot = true;\r\n            Packet.C2S.SwapItem.Encoded(new Packet.C2S.SwapItem.Struct(RefundInventorySlot, 6)).Send();\r\n        }\r\n\r\n        private static void RecvItemToTrinket(int id)\r\n        {\r\n            var trinketId = 0;\r\n            switch (Game.MapId)\r\n            {\r\n                case GameMapId.SummonersRift:\r\n                    trinketId = 3340;\r\n                    break;\r\n                case GameMapId.CrystalScar:\r\n                    trinketId = 3345;\r\n                    break;\r\n                case GameMapId.HowlingAbyss:\r\n                    trinketId = 2052;\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n\r\n            Packet.S2C.BuyItemAns.Encoded(new Packet.S2C.BuyItemAns.Struct(trinketId, 6, 0xA9)).Process();\r\n        }\r\n    }\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}